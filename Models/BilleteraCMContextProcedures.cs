// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using apiBillFold.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace apiBillFold.Models
{
    public partial class BilleteraCMContext
    {
        private IBilleteraCMContextProcedures _procedures;

        public virtual IBilleteraCMContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new BilleteraCMContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IBilleteraCMContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<buscarClienteResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getAsociacionDetallePaisResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getNumeroOrdenResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getTokenByMailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ManejoIngresoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ManejoIngresoEmpleadoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<obtenerMenuResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<obtenerMenuAdministradorResult>().HasNoKey().ToView(null);
        }
    }

    public partial class BilleteraCMContextProcedures : IBilleteraCMContextProcedures
    {
        private readonly BilleteraCMContext _context;

        public BilleteraCMContextProcedures(BilleteraCMContext context)
        {
            _context = context;
        }

        public virtual async Task<int> actualizarAutorizacionAsync(long? idmodificar, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idmodificar",
                    Value = idmodificar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [billfold].[actualizarAutorizacion] @idmodificar", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> agregarAdministradorAsync(string pNombre, string sNombre, string pApellido, string sApellido, long? dpi, string user, int? idEmpresa, string contra, int? tipo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pNombre",
                    Size = 200,
                    Value = pNombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sNombre",
                    Size = 200,
                    Value = sNombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pApellido",
                    Size = 200,
                    Value = pApellido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sApellido",
                    Size = 200,
                    Value = sApellido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dpi",
                    Value = dpi ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "user",
                    Size = 200,
                    Value = user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idEmpresa",
                    Value = idEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "contra",
                    Size = 256,
                    Value = contra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tipo",
                    Value = tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [billfold].[agregarAdministrador] @pNombre, @sNombre, @pApellido, @sApellido, @dpi, @user, @idEmpresa, @contra, @tipo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> agregarUsuarioAsync(string pNombre, string sNombre, string oNombre, string pApellido, string sApellido, string cApellido, string fechaNacimiento, string codiogEmpleado, string nit, decimal? salario, decimal? disponible, string dpi, string user, int? estado, long? idEmpresa, string hash, OutputParameter<long?> idEmpleado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteridEmpleado = new SqlParameter
            {
                ParameterName = "idEmpleado",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = idEmpleado?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pNombre",
                    Size = 200,
                    Value = pNombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sNombre",
                    Size = 200,
                    Value = sNombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "oNombre",
                    Size = 200,
                    Value = oNombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pApellido",
                    Size = 200,
                    Value = pApellido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sApellido",
                    Size = 200,
                    Value = sApellido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cApellido",
                    Size = 200,
                    Value = cApellido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fechaNacimiento",
                    Size = 20,
                    Value = fechaNacimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codiogEmpleado",
                    Size = 40,
                    Value = codiogEmpleado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nit",
                    Size = 30,
                    Value = nit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "salario",
                    Precision = 18,
                    Value = salario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "disponible",
                    Precision = 18,
                    Scale = 2,
                    Value = disponible ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "dpi",
                    Size = 80,
                    Value = dpi ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user",
                    Size = 80,
                    Value = user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "estado",
                    Value = estado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idEmpresa",
                    Value = idEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "hash",
                    Size = 1000,
                    Value = hash ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameteridEmpleado,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [billfold].[agregarUsuario] @pNombre, @sNombre, @oNombre, @pApellido, @sApellido, @cApellido, @fechaNacimiento, @codiogEmpleado, @nit, @salario, @disponible, @dpi, @user, @estado, @idEmpresa, @hash, @idEmpleado OUTPUT", sqlParameters, cancellationToken);

            idEmpleado.SetValue(parameteridEmpleado.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<buscarClienteResult>> buscarClienteAsync(string telefono, string mail, string nit, int? tipoBusqueda, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "telefono",
                    Size = 15,
                    Value = telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mail",
                    Size = 100,
                    Value = mail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nit",
                    Size = 100,
                    Value = nit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tipoBusqueda",
                    Value = tipoBusqueda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<buscarClienteResult>("EXEC @returnValue = [billfold].[buscarCliente] @telefono, @mail, @nit, @tipoBusqueda", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> crearClienteAsync(string primerNombre, string segundoNombre, string otrosNombre, string primerApellico, string segundoApellido, string apelllidoCasada, string nit, string alias, long? idempresa, int? telefono, OutputParameter<long?> resultado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterresultado = new SqlParameter
            {
                ParameterName = "resultado",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = resultado?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "primerNombre",
                    Size = 100,
                    Value = primerNombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "segundoNombre",
                    Size = 100,
                    Value = segundoNombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "otrosNombre",
                    Size = 100,
                    Value = otrosNombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "primerApellico",
                    Size = 100,
                    Value = primerApellico ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "segundoApellido",
                    Size = 100,
                    Value = segundoApellido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "apelllidoCasada",
                    Size = 100,
                    Value = apelllidoCasada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nit",
                    Size = 100,
                    Value = nit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "alias",
                    Size = 100,
                    Value = alias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idempresa",
                    Value = idempresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "telefono",
                    Value = telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterresultado,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [billfold].[crearCliente] @primerNombre, @segundoNombre, @otrosNombre, @primerApellico, @segundoApellido, @apelllidoCasada, @nit, @alias, @idempresa, @telefono, @resultado OUTPUT", sqlParameters, cancellationToken);

            resultado.SetValue(parameterresultado.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> generarTokenAsync(string mail, decimal? monto, int? comercio, OutputParameter<int?> resultado, OutputParameter<decimal?> token, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterresultado = new SqlParameter
            {
                ParameterName = "resultado",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = resultado?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametertoken = new SqlParameter
            {
                ParameterName = "token",
                Precision = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = token?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "mail",
                    Size = 500,
                    Value = mail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "monto",
                    Precision = 18,
                    Scale = 2,
                    Value = monto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "comercio",
                    Value = comercio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterresultado,
                parametertoken,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [billfold].[generarToken] @mail, @monto, @comercio, @resultado OUTPUT, @token OUTPUT", sqlParameters, cancellationToken);

            resultado.SetValue(parameterresultado.Value);
            token.SetValue(parametertoken.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getAsociacionDetallePaisResult>> getAsociacionDetallePaisAsync(int? idPais, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idPais",
                    Value = idPais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getAsociacionDetallePaisResult>("EXEC @returnValue = [billfold].[getAsociacionDetallePais] @idPais", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getNumeroOrdenResult>> getNumeroOrdenAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getNumeroOrdenResult>("EXEC @returnValue = [billfold].[getNumeroOrden]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getTokenByMailResult>> getTokenByMailAsync(string correo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "correo",
                    Size = 500,
                    Value = correo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getTokenByMailResult>("EXEC @returnValue = [billfold].[getTokenByMail] @correo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ManejoIngresoResult>> ManejoIngresoAsync(string Usuario, string password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Usuario",
                    Size = 400,
                    Value = Usuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 256,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ManejoIngresoResult>("EXEC @returnValue = [billfold].[ManejoIngreso] @Usuario, @password", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ManejoIngresoEmpleadoResult>> ManejoIngresoEmpleadoAsync(string Usuario, string password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Usuario",
                    Size = 400,
                    Value = Usuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 256,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ManejoIngresoEmpleadoResult>("EXEC @returnValue = [billfold].[ManejoIngresoEmpleado] @Usuario, @password", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<obtenerMenuResult>> obtenerMenuAsync(long? idUsuario, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idUsuario",
                    Value = idUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<obtenerMenuResult>("EXEC @returnValue = [billfold].[obtenerMenu] @idUsuario", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<obtenerMenuAdministradorResult>> obtenerMenuAdministradorAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<obtenerMenuAdministradorResult>("EXEC @returnValue = [billfold].[obtenerMenuAdministrador]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> realizarTransaccionAsync(int? empresaSocia, decimal? monto, int? tipoTransaccion, string documento, string descripcion, long? idUsuario, long? idoperador, OutputParameter<long?> idTransaccion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteridTransaccion = new SqlParameter
            {
                ParameterName = "idTransaccion",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = idTransaccion?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "empresaSocia",
                    Value = empresaSocia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "monto",
                    Precision = 18,
                    Scale = 2,
                    Value = monto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "tipoTransaccion",
                    Value = tipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "documento",
                    Size = 30,
                    Value = documento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "descripcion",
                    Size = 200,
                    Value = descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idUsuario",
                    Value = idUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idoperador",
                    Value = idoperador ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameteridTransaccion,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [billfold].[realizarTransaccion] @empresaSocia, @monto, @tipoTransaccion, @documento, @descripcion, @idUsuario, @idoperador, @idTransaccion OUTPUT", sqlParameters, cancellationToken);

            idTransaccion.SetValue(parameteridTransaccion.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updateContrasenaAsync(string contra, long? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "contra",
                    Size = 256,
                    Value = contra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [billfold].[updateContrasena] @contra, @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updateContrasenaEmpleadoAsync(string contra, long? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "contra",
                    Size = 256,
                    Value = contra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [billfold].[updateContrasenaEmpleado] @contra, @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> validarClienteAsync(string telefono, string mail, string dpi, long? idEmpresa, OutputParameter<string> Mensaje, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterMensaje = new SqlParameter
            {
                ParameterName = "Mensaje",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Mensaje?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "telefono",
                    Size = -1,
                    Value = telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mail",
                    Size = -1,
                    Value = mail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dpi",
                    Size = -1,
                    Value = dpi ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterMensaje,
                new SqlParameter
                {
                    ParameterName = "idEmpresa",
                    Value = idEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [billfold].[validarCliente] @telefono, @mail, @dpi, @Mensaje OUTPUT, @idEmpresa", sqlParameters, cancellationToken);

            Mensaje.SetValue(parameterMensaje.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> validarExistenciaUsuarioAsync(string correo, OutputParameter<int?> resultado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterresultado = new SqlParameter
            {
                ParameterName = "resultado",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = resultado?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "correo",
                    Size = 500,
                    Value = correo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterresultado,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [billfold].[validarExistenciaUsuario] @correo, @resultado OUTPUT", sqlParameters, cancellationToken);

            resultado.SetValue(parameterresultado.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> validarTokenAsync(long? usuario, decimal? token, OutputParameter<short?> resultado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterresultado = new SqlParameter
            {
                ParameterName = "resultado",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = resultado?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "usuario",
                    Value = usuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "token",
                    Precision = 18,
                    Value = token ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterresultado,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [billfold].[validarToken] @usuario, @token, @resultado OUTPUT", sqlParameters, cancellationToken);

            resultado.SetValue(parameterresultado.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
