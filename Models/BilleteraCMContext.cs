// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace apiBillFold.Models
{
    public partial class BilleteraCMContext : DbContext
    {
        public BilleteraCMContext()
        {
        }

        public BilleteraCMContext(DbContextOptions<BilleteraCMContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Administrador> Administrador { get; set; } = null!;
        public virtual DbSet<Autorizacion> Autorizacion { get; set; } = null!;
        public virtual DbSet<Bitacora> Bitacora { get; set; } = null!;
        public virtual DbSet<Campana> Campana { get; set; } = null!;
        public virtual DbSet<CamposTarjetaRegalo> CamposTarjetaRegalo { get; set; } = null!;
        public virtual DbSet<Categoria> Categoria { get; set; } = null!;
        public virtual DbSet<CategoriaTarjetaRegalo> CategoriaTarjetaRegalo { get; set; } = null!;
        public virtual DbSet<Configuracion> Configuracion { get; set; } = null!;
        public virtual DbSet<CuentaEmpresa> CuentaEmpresa { get; set; } = null!;
        public virtual DbSet<CuentaEmpresaMovimiento> CuentaEmpresaMovimiento { get; set; } = null!;
        public virtual DbSet<CuentaLiquidacion> CuentaLiquidacion { get; set; } = null!;
        public virtual DbSet<DetalleMenu> DetalleMenu { get; set; } = null!;
        public virtual DbSet<Detallegrupo> Detallegrupo { get; set; } = null!;
        public virtual DbSet<Empresa> Empresa { get; set; } = null!;
        public virtual DbSet<EmpresaFinanciamiento> EmpresaFinanciamiento { get; set; } = null!;
        public virtual DbSet<EmpresaSocia> EmpresaSocia { get; set; } = null!;
        public virtual DbSet<Funciones> Funciones { get; set; } = null!;
        public virtual DbSet<Grupo> Grupo { get; set; } = null!;
        public virtual DbSet<Institucionesfinancieras> Institucionesfinancieras { get; set; } = null!;
        public virtual DbSet<InvitacionesPendientes> InvitacionesPendientes { get; set; } = null!;
        public virtual DbSet<Menu> Menu { get; set; } = null!;
        public virtual DbSet<MenuSuperior> MenuSuperior { get; set; } = null!;
        public virtual DbSet<MovimientoDiario> MovimientoDiario { get; set; } = null!;
        public virtual DbSet<Orden> Orden { get; set; } = null!;
        public virtual DbSet<Pais> Pais { get; set; } = null!;
        public virtual DbSet<Promocion> Promocion { get; set; } = null!;
        public virtual DbSet<RolFuncion> RolFuncion { get; set; } = null!;
        public virtual DbSet<Roladministrador> Roladministrador { get; set; } = null!;
        public virtual DbSet<Roles> Roles { get; set; } = null!;
        public virtual DbSet<Saldodisponible> Saldodisponible { get; set; } = null!;
        public virtual DbSet<TarjetaRegalo> TarjetaRegalo { get; set; } = null!;
        public virtual DbSet<TextosMail> TextosMail { get; set; } = null!;
        public virtual DbSet<Tienda> Tienda { get; set; } = null!;
        public virtual DbSet<TipoEmpresa> TipoEmpresa { get; set; } = null!;
        public virtual DbSet<TipoTransaccion> TipoTransaccion { get; set; } = null!;
        public virtual DbSet<TiposCuenta> TiposCuenta { get; set; } = null!;
        public virtual DbSet<Token> Token { get; set; } = null!;
        public virtual DbSet<TransaccionesCampana> TransaccionesCampana { get; set; } = null!;
        public virtual DbSet<Turno> Turno { get; set; } = null!;
        public virtual DbSet<Usuario> Usuario { get; set; } = null!;
        public virtual DbSet<UsuarioCuenta> UsuarioCuenta { get; set; } = null!;
        public virtual DbSet<UsuarioDireccion> UsuarioDireccion { get; set; } = null!;
        public virtual DbSet<UsuarioExterno> UsuarioExterno { get; set; } = null!;
        public virtual DbSet<UsuarioMail> UsuarioMail { get; set; } = null!;
        public virtual DbSet<UsuarioMovimiento> UsuarioMovimiento { get; set; } = null!;
        public virtual DbSet<UsuarioTarjeta> UsuarioTarjeta { get; set; } = null!;
        public virtual DbSet<UsuarioTelefono> UsuarioTelefono { get; set; } = null!;

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Administrador>(entity =>
            {
                entity.ToTable("administrador", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Alias)
                    .HasMaxLength(250)
                    .HasColumnName("alias");

                entity.Property(e => e.CodigoEmpleado)
                    .HasMaxLength(100)
                    .HasColumnName("codigoEmpleado");

                entity.Property(e => e.Contraseña)
                    .HasMaxLength(8000)
                    .HasColumnName("contraseña");

                entity.Property(e => e.Dpi).HasColumnName("dpi");

                entity.Property(e => e.FechaNacimiento)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaNacimiento");

                entity.Property(e => e.IdEmpresa).HasColumnName("idEmpresa");

                entity.Property(e => e.Idtipo).HasColumnName("idtipo");

                entity.Property(e => e.Nit)
                    .HasMaxLength(20)
                    .HasColumnName("nit");

                entity.Property(e => e.PrimerApellido)
                    .HasMaxLength(250)
                    .HasColumnName("primerApellido");

                entity.Property(e => e.PrimerNombre)
                    .HasMaxLength(250)
                    .HasColumnName("primerNombre");

                entity.Property(e => e.SegundoApellido)
                    .HasMaxLength(250)
                    .HasColumnName("segundoApellido");

                entity.Property(e => e.SegundoNombre)
                    .HasMaxLength(250)
                    .HasColumnName("segundoNombre");
            });

            modelBuilder.Entity<Autorizacion>(entity =>
            {
                entity.ToTable("autorizacion", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Estado).HasColumnName("estado");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaCreacion");

                entity.Property(e => e.IdUsuario).HasColumnName("idUsuario");

                entity.Property(e => e.Valor).HasColumnName("valor");
            });

            modelBuilder.Entity<Bitacora>(entity =>
            {
                entity.ToTable("bitacora", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Fecha)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha");

                entity.Property(e => e.Funcion)
                    .HasMaxLength(50)
                    .HasColumnName("funcion");

                entity.Property(e => e.Idempresa).HasColumnName("idempresa");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(50)
                    .HasColumnName("usuario");
            });

            modelBuilder.Entity<Campana>(entity =>
            {
                entity.ToTable("Campana", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cantidad)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cantidad");

                entity.Property(e => e.Comprobante)
                    .HasMaxLength(500)
                    .HasColumnName("comprobante");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Estado).HasColumnName("estado");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("date")
                    .HasColumnName("fechaCreacion");

                entity.Property(e => e.IdAutorizador).HasColumnName("idAutorizador");

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdBancoDestino).HasColumnName("idBancoDestino");

                entity.Property(e => e.IdEmpresa).HasColumnName("idEmpresa");

                entity.Property(e => e.IdTarjetaRegalo).HasColumnName("idTarjetaRegalo");

                entity.Property(e => e.Monto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("monto");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .HasColumnName("nombre");

                entity.Property(e => e.NumeroDocumento)
                    .HasMaxLength(100)
                    .HasColumnName("numeroDocumento");

                entity.Property(e => e.TipoCliente).HasColumnName("tipoCliente");
            });

            modelBuilder.Entity<CamposTarjetaRegalo>(entity =>
            {
                entity.ToTable("camposTarjetaRegalo", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdTarjetaRegalo).HasColumnName("idTarjetaRegalo");

                entity.Property(e => e.Llave)
                    .HasMaxLength(10)
                    .HasColumnName("llave");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .HasColumnName("nombre");
            });

            modelBuilder.Entity<Categoria>(entity =>
            {
                entity.ToTable("categoria", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(255)
                    .HasColumnName("descripcion");

                entity.Property(e => e.IdEmpresa).HasColumnName("idEmpresa");

                entity.Property(e => e.Imagen)
                    .HasMaxLength(255)
                    .HasColumnName("imagen");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nombre");
            });

            modelBuilder.Entity<CategoriaTarjetaRegalo>(entity =>
            {
                entity.ToTable("categoriaTarjetaRegalo", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .HasColumnName("nombre");
            });

            modelBuilder.Entity<Configuracion>(entity =>
            {
                entity.ToTable("configuracion", "billfold");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(4, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Escala).HasMaxLength(100);

                entity.Property(e => e.Idpais).HasColumnName("idpais");

                entity.Property(e => e.Llave)
                    .HasMaxLength(50)
                    .HasColumnName("llave");

                entity.Property(e => e.Tipo).HasColumnName("tipo");

                entity.Property(e => e.Valor)
                    .HasMaxLength(100)
                    .HasColumnName("valor");
            });

            modelBuilder.Entity<CuentaEmpresa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cuenta_empresa", "billfold");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Fecha)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IdEmpresa).HasColumnName("idEmpresa");

                entity.Property(e => e.Llave)
                    .HasMaxLength(10)
                    .HasColumnName("llave");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("saldo");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(10)
                    .HasColumnName("usuario");
            });

            modelBuilder.Entity<CuentaEmpresaMovimiento>(entity =>
            {
                entity.ToTable("cuenta_empresa_movimiento", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Documento)
                    .HasMaxLength(50)
                    .HasColumnName("documento");

                entity.Property(e => e.Fecha)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha");

                entity.Property(e => e.IdEmpresa).HasColumnName("idEmpresa");

                entity.Property(e => e.Idcuenta).HasColumnName("idcuenta");

                entity.Property(e => e.Monto)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("monto");

                entity.Property(e => e.MovContable).HasColumnName("movContable");

                entity.Property(e => e.Tipo).HasColumnName("tipo");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(10)
                    .HasColumnName("usuario");
            });

            modelBuilder.Entity<CuentaLiquidacion>(entity =>
            {
                entity.ToTable("cuentaLiquidacion", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Iban)
                    .HasMaxLength(50)
                    .HasColumnName("iban");

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdEmpresa).HasColumnName("idEmpresa");

                entity.Property(e => e.IdTipo).HasColumnName("idTipo");

                entity.Property(e => e.NumeroCuenta)
                    .HasMaxLength(50)
                    .HasColumnName("numeroCuenta");
            });

            modelBuilder.Entity<DetalleMenu>(entity =>
            {
                entity.ToTable("detalleMenu", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdMenu).HasColumnName("idMenu");

                entity.Property(e => e.IdMenuSuperior).HasColumnName("idMenuSuperior");
            });

            modelBuilder.Entity<Detallegrupo>(entity =>
            {
                entity.ToTable("detallegrupo", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Fecha)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha");

                entity.Property(e => e.IdGrupo).HasColumnName("idGrupo");

                entity.Property(e => e.Idempresa).HasColumnName("idempresa");

                entity.Property(e => e.Idpais).HasColumnName("idpais");
            });

            modelBuilder.Entity<Empresa>(entity =>
            {
                entity.ToTable("Empresa", "billfold");

                entity.Property(e => e.Frase).HasMaxLength(150);

                entity.Property(e => e.Logo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PalabraClave)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Region)
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<EmpresaFinanciamiento>(entity =>
            {
                entity.ToTable("empresaFinanciamiento", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Autorizador)
                    .HasMaxLength(250)
                    .HasColumnName("autorizador");

                entity.Property(e => e.CostoOperacion)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("costoOperacion");

                entity.Property(e => e.IdEmpresa).HasColumnName("idEmpresa");

                entity.Property(e => e.IdMoneda).HasColumnName("id_moneda");

                entity.Property(e => e.Porcentaje)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("porcentaje");

                entity.Property(e => e.UrlServicio)
                    .HasMaxLength(250)
                    .HasColumnName("urlServicio");
            });

            modelBuilder.Entity<EmpresaSocia>(entity =>
            {
                entity.ToTable("empresaSocia", "billfold");

                entity.Property(e => e.AplicaEnvio).HasColumnName("aplicaEnvio");

                entity.Property(e => e.AplicaNegociacion).HasColumnName("aplicaNegociacion");

                entity.Property(e => e.Contacto).HasMaxLength(250);

                entity.Property(e => e.Direccion).HasMaxLength(250);

                entity.Property(e => e.EmailContacto).HasMaxLength(100);

                entity.Property(e => e.IdMoneda).HasColumnName("Id_moneda");

                entity.Property(e => e.IdPais).HasColumnName("Id_pais");

                entity.Property(e => e.Idpais1).HasColumnName("Idpais");

                entity.Property(e => e.Nit).HasMaxLength(50);

                entity.Property(e => e.Nombre).HasMaxLength(250);

                entity.Property(e => e.PorcentajeEnvio)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("porcentajeEnvio");

                entity.Property(e => e.PorcentajeNegociacion)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("porcentajeNegociacion");

                entity.Property(e => e.PorcentajeRecargo).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PorcentajeXf)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PorcentajeXF");

                entity.Property(e => e.TiendaFisica).HasColumnName("tiendaFisica");

                entity.Property(e => e.TiendaLinea).HasColumnName("tiendaLinea");

                entity.Property(e => e.UidTienda)
                    .HasMaxLength(50)
                    .HasColumnName("uidTienda");
            });

            modelBuilder.Entity<Funciones>(entity =>
            {
                entity.ToTable("Funciones", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .HasColumnName("nombre");
            });

            modelBuilder.Entity<Grupo>(entity =>
            {
                entity.ToTable("grupo", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(300)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Estado).HasColumnName("estado");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaCreacion");

                entity.Property(e => e.Idpais).HasColumnName("idpais");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .HasColumnName("nombre");
            });

            modelBuilder.Entity<Institucionesfinancieras>(entity =>
            {
                entity.ToTable("institucionesfinancieras", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(5)
                    .HasColumnName("codigo");

                entity.Property(e => e.Envia).HasColumnName("envia");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .HasColumnName("nombre");

                entity.Property(e => e.Pais).HasColumnName("pais");

                entity.Property(e => e.Peso).HasColumnName("peso");

                entity.Property(e => e.Recibe).HasColumnName("recibe");

                entity.Property(e => e.Tipo).HasColumnName("tipo");
            });

            modelBuilder.Entity<InvitacionesPendientes>(entity =>
            {
                entity.ToTable("invitacionesPendientes", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Canjeado).HasColumnName("canjeado");

                entity.Property(e => e.Correo)
                    .HasMaxLength(250)
                    .HasColumnName("correo");

                entity.Property(e => e.Enviado).HasColumnName("enviado");

                entity.Property(e => e.FechaCanje)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaCanje");

                entity.Property(e => e.FechaEnvio)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaEnvio");

                entity.Property(e => e.IdEmpresa).HasColumnName("idEmpresa");

                entity.Property(e => e.Monto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("monto");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(20)
                    .HasColumnName("telefono");
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.ToTable("MENU", "billfold");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idfuncion).HasColumnName("IDFUNCION");

                entity.Property(e => e.Peso).HasColumnName("peso");

                entity.Property(e => e.Ruta)
                    .HasMaxLength(100)
                    .HasColumnName("RUTA");
            });

            modelBuilder.Entity<MenuSuperior>(entity =>
            {
                entity.ToTable("menuSuperior", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.Peso).HasColumnName("peso");
            });

            modelBuilder.Entity<MovimientoDiario>(entity =>
            {
                entity.ToTable("movimiento_diario", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Documento).HasColumnName("documento");

                entity.Property(e => e.Fecha)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha");

                entity.Property(e => e.IdEmpresa)
                    .HasColumnName("idEmpresa")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Idempleado).HasColumnName("idempleado");

                entity.Property(e => e.Monto)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("monto");

                entity.Property(e => e.Tipo).HasColumnName("tipo");

                entity.Property(e => e.TipoMovimiento).HasColumnName("tipoMovimiento");
            });

            modelBuilder.Entity<Orden>(entity =>
            {
                entity.ToTable("orden", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Dato).HasColumnName("dato");
            });

            modelBuilder.Entity<Pais>(entity =>
            {
                entity.ToTable("pais", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Activo).HasColumnName("activo");

                entity.Property(e => e.Logo)
                    .HasMaxLength(100)
                    .HasColumnName("logo");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(5)
                    .HasColumnName("moneda");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .HasColumnName("nombre");

                entity.Property(e => e.Simbolo)
                    .HasMaxLength(3)
                    .HasColumnName("simbolo");

                entity.Property(e => e.SimboloMoneda)
                    .HasMaxLength(5)
                    .HasColumnName("simboloMoneda");
            });

            modelBuilder.Entity<Promocion>(entity =>
            {
                entity.ToTable("promocion", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .HasColumnName("descripcion");

                entity.Property(e => e.EsGeneral).HasColumnName("esGeneral");

                entity.Property(e => e.FechaInicio)
                    .HasColumnType("date")
                    .HasColumnName("fechaInicio");

                entity.Property(e => e.Fechafin)
                    .HasColumnType("date")
                    .HasColumnName("fechafin");

                entity.Property(e => e.MontoAplicar)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("montoAplicar");

                entity.Property(e => e.MontoMaximo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("montoMaximo");

                entity.Property(e => e.MontoMinimo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("montoMinimo");

                entity.Property(e => e.Montodividir)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("montodividir");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(75)
                    .HasColumnName("nombre");

                entity.Property(e => e.PorcentajeAplicar)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("porcentajeAplicar");

                entity.Property(e => e.Tipo).HasColumnName("tipo");
            });

            modelBuilder.Entity<RolFuncion>(entity =>
            {
                entity.ToTable("rolFuncion", "billfold");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idfuncion).HasColumnName("IDFUNCION");

                entity.Property(e => e.Idrol).HasColumnName("IDROL");
            });

            modelBuilder.Entity<Roladministrador>(entity =>
            {
                entity.ToTable("roladministrador", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdAdministrador).HasColumnName("idAdministrador");

                entity.Property(e => e.IdRol).HasColumnName("idRol");
            });

            modelBuilder.Entity<Roles>(entity =>
            {
                entity.ToTable("Roles", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .HasColumnName("nombre");

                entity.Property(e => e.TipoEmpresa).HasColumnName("tipoEmpresa");
            });

            modelBuilder.Entity<Saldodisponible>(entity =>
            {
                entity.ToTable("saldodisponible", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaCreacion");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaModificacion");

                entity.Property(e => e.IdMoneda).HasColumnName("idMoneda");

                entity.Property(e => e.IdTipo).HasColumnName("idTipo");

                entity.Property(e => e.Idusuario).HasColumnName("idusuario");

                entity.Property(e => e.SaldoDisponible1)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoDisponible");

                entity.Property(e => e.SaldoMaximo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoMaximo");
            });

            modelBuilder.Entity<TarjetaRegalo>(entity =>
            {
                entity.ToTable("tarjetaRegalo", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Nombre).HasMaxLength(100);

                entity.Property(e => e.Ruta)
                    .HasMaxLength(500)
                    .HasColumnName("ruta");

                entity.Property(e => e.Tipo).HasColumnName("tipo");
            });

            modelBuilder.Entity<TextosMail>(entity =>
            {
                entity.ToTable("textos_mail", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .HasColumnName("descripcion");

                entity.Property(e => e.IdPais).HasColumnName("idPais");

                entity.Property(e => e.Texto).HasColumnName("texto");
            });

            modelBuilder.Entity<Tienda>(entity =>
            {
                entity.ToTable("tienda", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(255)
                    .HasColumnName("direccion");

                entity.Property(e => e.IdEmpresaSocia).HasColumnName("idEmpresaSocia");

                entity.Property(e => e.Latitud)
                    .HasMaxLength(50)
                    .HasColumnName("latitud");

                entity.Property(e => e.Longitud)
                    .HasMaxLength(50)
                    .HasColumnName("longitud");

                entity.Property(e => e.Nit)
                    .HasMaxLength(50)
                    .HasColumnName("nit");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(255)
                    .HasColumnName("nombre");

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(250)
                    .HasColumnName("razonSocial");
            });

            modelBuilder.Entity<TipoEmpresa>(entity =>
            {
                entity.ToTable("tipoEmpresa", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .HasColumnName("nombre");
            });

            modelBuilder.Entity<TipoTransaccion>(entity =>
            {
                entity.ToTable("tipoTransaccion", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Direccion).HasColumnName("direccion");

                entity.Property(e => e.Llave)
                    .HasMaxLength(10)
                    .HasColumnName("llave");
            });

            modelBuilder.Entity<TiposCuenta>(entity =>
            {
                entity.ToTable("tiposCuenta", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(5)
                    .HasColumnName("codigo");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .HasColumnName("nombre");
            });

            modelBuilder.Entity<Token>(entity =>
            {
                entity.ToTable("token", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comercio).HasColumnName("comercio");

                entity.Property(e => e.Estado).HasColumnName("estado");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("fechacreacion");

                entity.Property(e => e.Idusuario).HasColumnName("idusuario");

                entity.Property(e => e.Monto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("monto");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .HasColumnName("tipo");

                entity.Property(e => e.Token1)
                    .HasMaxLength(6)
                    .HasColumnName("token");

                entity.Property(e => e.Valor)
                    .HasMaxLength(20)
                    .HasColumnName("valor");
            });

            modelBuilder.Entity<TransaccionesCampana>(entity =>
            {
                entity.ToTable("transaccionesCampana", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Correo)
                    .HasMaxLength(100)
                    .HasColumnName("correo");

                entity.Property(e => e.Estado).HasColumnName("estado");

                entity.Property(e => e.IdCampana).HasColumnName("idCampana");

                entity.Property(e => e.Monto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("monto");
            });

            modelBuilder.Entity<Turno>(entity =>
            {
                entity.ToTable("turno", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.HoraFin).HasColumnName("horaFin");

                entity.Property(e => e.HoraInicio).HasColumnName("horaInicio");

                entity.Property(e => e.IdEmpresa).HasColumnName("idEmpresa");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(1000)
                    .HasColumnName("nombre");
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.ToTable("Usuario", "billfold");

                entity.Property(e => e.Alias)
                    .HasColumnName("alias")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contrasena)
                    .HasMaxLength(8000)
                    .HasColumnName("contrasena");

                entity.Property(e => e.Disponible)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("disponible");

                entity.Property(e => e.Dpi).HasColumnName("DPI");

                entity.Property(e => e.FechaNacimiento)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaNacimiento");

                entity.Property(e => e.IdEmpresa).HasColumnName("idEmpresa");

                entity.Property(e => e.Nit).HasMaxLength(50);

                entity.Property(e => e.OtrosNombres).HasColumnName("otrosNombres");

                entity.Property(e => e.Salario).HasColumnType("decimal(18, 0)");
            });

            modelBuilder.Entity<UsuarioCuenta>(entity =>
            {
                entity.ToTable("usuario_cuenta", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Fecha)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha");

                entity.Property(e => e.IdUsuario).HasColumnName("idUsuario");

                entity.Property(e => e.Llave)
                    .HasMaxLength(10)
                    .HasColumnName("llave");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldo");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(10)
                    .HasColumnName("usuario");
            });

            modelBuilder.Entity<UsuarioDireccion>(entity =>
            {
                entity.ToTable("usuarioDireccion", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Alias)
                    .HasMaxLength(50)
                    .HasColumnName("alias");

                entity.Property(e => e.Colonia)
                    .HasMaxLength(50)
                    .HasColumnName("colonia");

                entity.Property(e => e.Departamento).HasColumnName("departamento");

                entity.Property(e => e.Detalle)
                    .HasMaxLength(250)
                    .HasColumnName("detalle");

                entity.Property(e => e.DireccionFiscal)
                    .HasMaxLength(150)
                    .HasColumnName("direccionFiscal");

                entity.Property(e => e.Hub)
                    .HasMaxLength(100)
                    .HasColumnName("hub");

                entity.Property(e => e.IdUsuario).HasColumnName("idUsuario");

                entity.Property(e => e.Indicaciones)
                    .HasMaxLength(50)
                    .HasColumnName("indicaciones");

                entity.Property(e => e.Latitud)
                    .HasMaxLength(100)
                    .HasColumnName("latitud");

                entity.Property(e => e.Longitud)
                    .HasMaxLength(100)
                    .HasColumnName("longitud");

                entity.Property(e => e.Municipio).HasColumnName("municipio");

                entity.Property(e => e.NumeroCasa)
                    .HasMaxLength(50)
                    .HasColumnName("numeroCasa");

                entity.Property(e => e.Pais).HasColumnName("pais");

                entity.Property(e => e.Ubicacion)
                    .HasMaxLength(150)
                    .HasColumnName("ubicacion");

                entity.Property(e => e.Zip).HasColumnName("zip");

                entity.Property(e => e.Zona)
                    .HasMaxLength(35)
                    .HasColumnName("zona");
            });

            modelBuilder.Entity<UsuarioExterno>(entity =>
            {
                entity.ToTable("usuarioExterno", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Apellidos)
                    .HasMaxLength(50)
                    .HasColumnName("apellidos");

                entity.Property(e => e.Correo)
                    .HasMaxLength(50)
                    .HasColumnName("correo");

                entity.Property(e => e.Foto).HasColumnName("foto");

                entity.Property(e => e.Hash)
                    .HasMaxLength(500)
                    .HasColumnName("hash");

                entity.Property(e => e.IdUsuario).HasColumnName("idUSuario");

                entity.Property(e => e.Nombres)
                    .HasMaxLength(50)
                    .HasColumnName("nombres");

                entity.Property(e => e.Politica).HasColumnName("politica");

                entity.Property(e => e.Telefono).HasColumnName("telefono");
            });

            modelBuilder.Entity<UsuarioMail>(entity =>
            {
                entity.ToTable("usuarioMail", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Completo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Encabezado)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IdUsuario).HasColumnName("idUsuario");

                entity.Property(e => e.Servidor)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UsuarioMovimiento>(entity =>
            {
                entity.ToTable("usuario_movimiento", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Documento)
                    .HasMaxLength(50)
                    .HasColumnName("documento");

                entity.Property(e => e.Fecha)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha");

                entity.Property(e => e.IdUsuario).HasColumnName("idUsuario");

                entity.Property(e => e.Idcuenta).HasColumnName("idcuenta");

                entity.Property(e => e.Monto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("monto");

                entity.Property(e => e.MovContable).HasColumnName("movContable");

                entity.Property(e => e.Sfecha)
                    .HasMaxLength(50)
                    .HasColumnName("sfecha");

                entity.Property(e => e.Tipo).HasColumnName("tipo");

                entity.Property(e => e.Ubicacion)
                    .HasMaxLength(50)
                    .HasColumnName("ubicacion");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(10)
                    .HasColumnName("usuario");
            });

            modelBuilder.Entity<UsuarioTarjeta>(entity =>
            {
                entity.ToTable("usuarioTarjeta", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Apellido)
                    .HasMaxLength(150)
                    .HasColumnName("apellido");

                entity.Property(e => e.Cvv)
                    .HasMaxLength(150)
                    .HasColumnName("cvv");

                entity.Property(e => e.DireccionId).HasColumnName("direccionID");

                entity.Property(e => e.FechaExpiracion)
                    .HasMaxLength(10)
                    .HasColumnName("fechaExpiracion");

                entity.Property(e => e.IdUsuario).HasColumnName("idUsuario");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(150)
                    .HasColumnName("nombre");

                entity.Property(e => e.Tarjeta).HasColumnName("tarjeta");

                entity.Property(e => e.TipoTarjeta)
                    .HasMaxLength(25)
                    .HasColumnName("tipoTarjeta");
            });

            modelBuilder.Entity<UsuarioTelefono>(entity =>
            {
                entity.ToTable("usuarioTelefono", "billfold");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Alias)
                    .HasMaxLength(75)
                    .HasColumnName("alias");

                entity.Property(e => e.IdEmpleado).HasColumnName("idEmpleado");

                entity.Property(e => e.Numero)
                    .HasMaxLength(15)
                    .HasColumnName("numero");

                entity.Property(e => e.Tipo).HasColumnName("tipo");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}